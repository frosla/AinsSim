<?xml version="1.0" encoding="UTF-8"?>
<dialog Color="[0.941 0.941 0.941]" HPosition="center" Name="Depot_editor" Position="[0 570 1043 510]" Resize="on" VPosition="center" windowStyle="normal">
    <GlobalSrc>%
% The source code written here will be executed when
% windows load. Works like 'onLoad' event of other languages.
%

global param_setup;
global dlgDE1dStatus;
global depot;
global doDebug;
global domains;
global button_info;

%domains.meters = [param_setup.x_min param_setup.y_min param_setup.x_max param_setup.y_max];
%domains.percent = [0 0 1 1];
%domains.cells = [0 0 param_setup.Xmax param_setup.Ymax];
%domains.METERS = 1;
%domains.PERCENT = 2;
%domains.CELLS = 3;

dbg_disp('entering Depot_editor');

if ~exist('depot') || ~isfield(depot, 'adv_materials')
  depot.material_names =['mirror'; 'vacuum'; 'semi mirror'; 'mirror film'; 'barrier'; 'high-r barrier'];
%  depot.materials =...
%  [[0 1 0.5 0.92 0.98 0.999];   % transmission factor
%   [1 0 0.5 0.08 0.02 0.001];   % reflection factor
%   [1 1   0    1    1     1];   % film: trans/refl per leyer: 1 = yes; else trans/refl at borders only
%   [1 1   1    1    1     1]];  % refraction index
%  depot.DEPOT_TRANS = 1;
%  depot.DEPOT_REFL = 2;
%  depot.DEPOT_FILM = 3;
%  depot.DEPOT_REFR_IDX = 4;
  depot.adv_materials =...
  [[0 1 0.5 0.92 0.98 0.999];   % t_out_in transmission factor
   [0 1 0.5 0.92 0.98 0.999];   % t_in_in  
   [0 1 0.5 0.92 0.98 0.999];   % t_in_out  
   [0 0 0   0    0    0    ];   % phi_t_out_in additional phi at transmission
   [0 0 0   0    0    0    ];   % phi_t_in_in  
   [0 0 0   0    0    0    ];   % phi_t_in_out  
   [1 0 0.5 0.08 0.02 0.001];   % r_out_in reflection factor
   [1 0 0.5 0.08 0.02 0.001];   % r_in_in
   [1 0 0.5 0.08 0.02 0.001];   % r_in_out
   [0 0 0   0    0    0    ];   % phi_r_out_in additional phi at transmission
   [0 0 0   0    0    0    ];   % phi_r_in_in  
   [0 0 0   0    0    0    ];   % phi_r_in_out  
   [1 1   1    1    1     1];   % refraction index
   [0 0   0    0    0     0]];  % use refraction index -&gt; if '1' then use only refraction index!
  depot.toi = 1;
  depot.tii = 2;
  depot.tio = 3;
  depot.phi_toi = 4;
  depot.phi_tii = 5;
  depot.phi_tio = 6;
  depot.roi = 7;
  depot.rii = 8;
  depot.rio = 9;
  depot.phi_roi = 10;
  depot.phi_rii = 11;
  depot.phi_rio = 12;
  depot.refr_idx = 13;
  depot.use_refraction = 14;
end

setappdata(gcf(), 'depot', depot);

count = columns(depot.adv_materials);

set(Depot_editor.Slider_DE1d, 'Min', min(1, count));
set(Depot_editor.Slider_DE1d, 'Max', count);
if (count &gt; 1)
  stepsize = 1/(count-1);
else
  stepsize = 1;
end
set(Depot_editor.Slider_DE1d, 'Sliderstep', [stepsize 1]);

set(Depot_editor.Slider_DE1d, 'Value', 1);
%set(Depot_editor.la_material_number, 'string', '1');
%set(Depot_editor.la_num_of_materials, 'string', num2str(count));


set(Depot_editor.figure, 'closerequestfcn', {@callBack_close_DE1d_fcn, Depot_editor});
%set(Depot_editor.Slider_DE1d, 'callback', {@callBack_read_materials_fcn, Depot_editor});
%set(Depot_editor.Image_4, 'buttondownfcn', {@callBack_mouse_fcn, Depot_editor});

%set(Depot_editor.figure, 'visible', 'off');


set(Depot_editor.figure, 'numbertitle', 'off');
set(Depot_editor.figure, 'name', 'Depot_editor');
grid on;

%axis(AINS_project.Image_2);
%axis off;


% set default
dlgDE1dStatus = 'cancelled';

%set(Depot_editor.figure, 'visible', 'on');


%refresh();

% own handler
%movePlottedItems('dimension', '1d', 'cleanup_fcn', 'callBack_read_materials_fcn', 'cln_arg', Depot_editor, 'debug', doDebug);
%callBack_read_materials_fcn([], [], Depot_editor);

callBack_fill_in_factors_fcn([], [], Depot_editor);

refresh();



</GlobalSrc>
    <uiControl class="imgCtrl" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" Name="Image_4" Position="[711 80 300 300]" visible="on"/>
    <uiControl class="buttonCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" icon="" Name="b_new_material" Position="[428 315 124 43]" String="new" TooltipString="add a new material" visible="on">% This code will be executed when user click the button control.
% As default, all events are deactivated, to activate must set the
% property 'generateCallback' from the properties editor

global dlgDE1dStatus;
%global depot;
global doDebug;

dbg_disp('b_new_material');

dlgDE1dStatus = 'added';

depot = getappdata(gcf(), 'depot');


depot.material_names = [depot.material_names; 'new material'];
depot.adv_materials = [depot.adv_materials, [0 0 0 0 0 0 0 0 0 0 0 0 0 0]'];

count = columns(depot.adv_materials);

set(Depot_editor.Slider_DE1d, 'Min', 1);
set(Depot_editor.Slider_DE1d, 'Max', count);

handles = guidata(gcf());
%handles.number = count; %fix(get(Depot_editor.Slider_DE1d, 'Value'));

guidata(gcf(), handles);


if (count &gt; 1)
  stepsize = 1/(count-1);
else
  stepsize = 1;
end
set(Depot_editor.Slider_DE1d, 'Sliderstep', [stepsize 1]);

set(Depot_editor.Slider_DE1d, 'Value', count);
%set(Depot_editor.la_material_number, 'string', count);
%set(Depot_editor.la_num_of_materials, 'string', num2str(count));

setappdata(gcf(), 'depot', depot);

callBack_fill_in_factors_fcn([], [], Depot_editor);
</uiControl>
    <uiControl class="buttonCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" icon="" Name="b_delete_material" Position="[564 315 122 43]" String="delete" TooltipString="delete this material" visible="on">% This code will be executed when user click the button control.
% As default, all events are deactivated, to activate must set the
% property 'generateCallback' from the properties editor

global dlgDE1dStatus;
%global depot;
global doDebug;

dbg_disp('b_delete_material');

dlgDE1dStatus = 'deleted';

depot = getappdata(gcf(), 'depot');

count = columns(depot.adv_materials);

current_mat = str2num(get(Depot_editor.la_material_number, 'String'));
if count &gt; 0 &amp;&amp; current_mat &gt; 0 &amp;&amp; current_mat &lt;= count
  depot.adv_materials(:, current_mat) = [];  % delete current material
  depot.material_names(current_mat, :) = [];
else
  dbg_disp('nothing to delete');
  return;
end


count = columns(depot.adv_materials);

current_mat = current_mat - 1;
if current_mat == 0 &amp;&amp; count &gt; 0
  current_mat = 1;
end

set(Depot_editor.Slider_DE1d, 'Min', min(1, count));
set(Depot_editor.Slider_DE1d, 'Max', count);
set(Depot_editor.Slider_DE1d, 'Value', max(0, current_mat));

handles = guidata(gcf());
%handles.number = 1; %fix(get(Depot_editor.Slider_DE1d, 'Value'));

guidata(gcf(), handles);


if (count &gt; 1)
  stepsize = 1/(count-1);
else
  stepsize = 1;
end
set(Depot_editor.Slider_DE1d, 'Sliderstep', [stepsize 1]);

setappdata(gcf(), 'depot', depot);

callBack_fill_in_factors_fcn([], [], Depot_editor);
</uiControl>
    <uiControl class="sliderCtrl" BackgroundColor="[0.941 0.941 0.941]" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" Max="99" Min="0" Name="Slider_DE1d" Position="[432 415 251 22]" TooltipString="" Value="4" visible="on">% This code will be executed when user change the value of slider.
% As default, all events are deactivated, to activate must set the
% property 'generateCallback' from the properties editor

%global depot;
global doDebug;

dbg_disp('entering Slider_DE1d', doDebug);

callBack_fill_in_factors_fcn([], [], Depot_editor);

</uiControl>
    <uiControl class="buttonCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" icon="" Name="b_close_DE1d" Position="[918 13 90 43]" String="Save" TooltipString="" visible="on">% This code will be executed when user click the button control.
% As default, all events are deactivated, to activate must set the
% property 'generateCallback' from the properties editor

global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');  % save the values back to globals

close(Depot_editor.figure);
</uiControl>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="20" FontWeight="bold" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="center" isAutoSize="false" Name="la_material_number" Position="[495 370 36 38]" String="Label_27" TooltipString="" visible="on"/>
    <uiControl class="callBackCtrl" Arguments="this" functionName="callBack_close_DE1d_fcn" Name="callBack_close_DE1d" Position="[945 20 52 52]">% This code can define a callback.
% You must associate them to figure or control onload like event window

global param_setup;


set(this.figure, 'visible', 'off');

closereq();
</uiControl>
    <uiControl class="callBackCtrl" Arguments="Depot_editor" functionName="callBack_sim_materials_fcn" Name="callBack_sim_materials" Position="[710 115 52 52]">###################################
##
## small simulator for fast material simulations
##

global doDebug;
global domains;
%global Pmat;
%global ME_sources;
%global ME_materials,
%global depot;

################ take current values

depot = getappdata(gcf(), 'depot');

current_mat = str2num(get(Depot_editor.la_material_number, 'string'))

% check if at least one material is already defined
if current_mat == 0;
  return;
end

axis(Depot_editor.Image_4);


USE_ENGINE_CC = 1;

CALLS = 1; 

ENGINE_CALLS = 1; ## compiler -&gt; particlecount = CALLS * RUNS_PER_CALL
ENGINE_RUNS_PER_CALL = 100;%100000;    ## not too high, not too low...
ENGINE_VERBOSE = 0;

isCoherent = 0;

X_max = 200;
Y_max = 200;


###################################


if (USE_ENGINE_CC)

  %oldDir = pwd();
  %cd('fcn')

  fname_oct = file_in_loadpath ('engine_mc_adv_1d.oct')
  fname_cc  = file_in_loadpath ('engine_mc_adv_1d.cc')
  [info_oct, err1, msg] = lstat (fname_oct); %'engine_mc_adv_1d.oct');
  if err1 != 0
    disp('could not locate engine_mc_adv_1d.oct...')
  end

  [info_cc, err, msg] = lstat (fname_cc);
  if err == 0  ## c++ file found -&gt; check if newer than oct file
    if err1 || info_cc.mtime &gt; info_oct.mtime
      tic()
      if !err1
        autoload('engine_mc_adv_1d', fname_oct, 'remove')  ## needed to remove engine_mc.oct to prevend ld permission error
      end
      disp('compiling engine_mc_adv_1d.cc ...')

        hh = waitbar(0.8, 'compiling engine'); % just show a value

        [output, status] = mkoctfile(fname_cc)
        toc()
        
        delete(hh);

      if (status != 0)  ## check for compilation error
        disp('compiling engine_mc_adv_1d.cc FAILED ... END HERE')
        %cd(oldDir);
        return
      end

      fname_oct = file_in_loadpath ('engine_mc_adv_1d.oct')
   end
  end

  ## load oct file and remove it ofter program has launched
  autoload('engine_mc_adv_1d', fname_oct, 'remove')

  %cd(oldDir);
end



ME_sources = [0.2-0.03 0 0.2+0.03 0, 0.06 0, 0 0 1 1 2, 2000, 45 0 0];
ME_materials = [0.4 0.0 0.6 1.0, current_mat 0, 0 0 1 1 2, 1000, 0 0 0];


%idx_mat = find(ME_materials(:, domains.MAT_SRC_IND) == domains.MAT_IND);
%idx_src = find(ME_materials(:, domains.MAT_SRC_IND) == domains.SRC_IND);
transformed_materials = transformRectD1D2(ME_materials, [0 0 1 1], [1 1 X_max Y_max]);
transformed_sources   = transformRectD1D2(ME_sources, [0 0 1 1], [1 1 X_max Y_max])


%['mirror'; 'vacuum'; 'semi mirror'; 'mirror film'; 'barrier'; 'high-r barrier'],...

%adv_materials =...
%    [[0 1 0.5 0.92 0.98 0.999];   % t_out_in transmission factor
%    [0 1 0.5 0.92 0.98 0.999];   % t_in_in
%    [0 1 0.5 0.92 0.98 0.999];   % t_in_out
%    [0 0 0   0    0    0    ];   % phi_t_out_in additional phi at transmission
%    [0 0 0   0    0    0    ];   % phi_t_in_in
%    [0 0 0   0    0    0    ];   % phi_t_in_out
%    [1 0 0.5 0.08 0.02 0.001];   % r_out_in reflection factor
%    [1 0 0.5 0.08 0.02 0.001];   % r_in_in
%    [1 0 0.5 0.08 0.02 0.001];   % r_in_out
%    [0 0 0   0    0    0    ];   % phi_r_out_in additional phi at transmission
%    [0 0 0   0    0    0    ];   % phi_r_in_in
%    [0 0 0   0    0    0    ];   % phi_r_in_out
%    [1 1   1    1    1     1];   % refraction index
%    [0 0   0    0    0     0]];  % use refraction index -&gt; if '1' then use only refraction index!





%// prepare materials
material = int8(zeros(X_max, 1));
mat_count = rows(transformed_materials);

for n = 1:mat_count
  rect = round(transformed_materials(n,:));
  idx_mat = current_mat;
  
  material(rect(1):rect(3)) = -idx_mat;
end
material(1) = 0;   %// do not allow material at borders
material(end) = 0;


%% SIMULATION PART

pos_x = transformed_sources(1, domains.X_MIN);
%pos_y = transformed_sources(1,2);  % not needed in 1d
angle = transformed_sources(1, domains.ROT);
v_x =   sind(angle);
%v_y =   transformed_sources(1,4);  % not needed in 1d
sig_x = transformed_sources(1, domains.SIGMA);  % -&gt; acts on pos_x
sig_v = transformed_sources(1, domains.SIGMA);  % -&gt; acts on v_x


rand('uniform');    %// set uniform distribution
for n = 1:CALLS %(CALLS/ENGINE_RUNS_PER_CALL)       %// run a certain number of particles per source
  
  vx_rnd = [];
  for k = 1:1 #size(source, 1)
    vx_rnd = [vx_rnd; randn(1, ENGINE_RUNS_PER_CALL)*sig_v + v_x(k)];
  end
  
  posx_rnd = [];
  for k = 1:1 #size(source, 1)
    posx_rnd = [posx_rnd; 50*randn(1, ENGINE_RUNS_PER_CALL)*sig_x + pos_x(k)];
  end
  
  Pmat = engine_mc_adv_1d(ENGINE_RUNS_PER_CALL,...
                            X_max, Y_max,...
                            posx_rnd,...
                            vx_rnd,...
                            material, depot.adv_materials,...
                            1.0, 1.0,...
                            isCoherent,...
                            ENGINE_VERBOSE);
  if mod(n, 100) == 0
    disp(sprintf('Monte Carlo running... source %i, particle %i millions',...
    s, n*ENGINE_RUNS_PER_CALL/1000000))
  end
  
end

Z = CALLS*ENGINE_RUNS_PER_CALL;
if (Z &gt;= 1000000)
  disp(sprintf('Monte Carlo finished: %i million zitterons', Z/1000000))
else
  disp(sprintf('Monte Carlo finished: %i zitterons', Z))
end

%      P(198:202,198:202)


%
% show image if P is available
%
resultAvailable = true;

if size(find(Pmat), 1) &lt; 10
  resultAvailable = false
end


% show density
if resultAvailable
  hold off
  imagesc(gca, Pmat'); %, [0:0.15:1]);
  axis(gca, 'xy');
end


hold on


for m = 1:size(transformed_materials, 1)
  m1 = transformed_materials(m, 1:4);
  m2 = zeros(size(m1));
  m2(1) = m1(1);
  m2(2) = m1(2);
  m2(4) = m1(4) - m1(2);
  m2(3) = m1(3) - m1(1);
  rectangle('Position', m2', 'EdgeColor', 'y');
end




num_traj = 10;

pos1 = transformed_sources(1,1);
showtraj1 = 1;
showtraj2 = 0;
pos2 = 0;

%setup.sigma_g = 0.001;
sigma_g1 = 1; %setup.sigma_g;
sigma_g2 = 1; %setup.sigma_g;
traj_tuning = [-3 5];



%% I've forgotten what these have been...
opening = 0;

if resultAvailable %&amp;&amp; param_visual.show_traj %showtraj21 || showtraj2
  
  disp('...show trajectories');
  
  c = cumsum(Pmat, 1);           # sum up P's rows
  c_max = c(end, 1);
  c = c/c_max;  ## normalize
  c_max = 1;    ## keep c_max which is 1 due to normalizing
  for k = 2:size(c,2)
    c(:,k) = c(:,k) + (c_max - c(end,k))/2;    # add cut-off part
  end
  
  % define relative initial position vectors
  if opening == 0
    start_factor = 1;
  else
    start_factor = 0.9*opening;
  end
  
  % calculate values of equal distance
  startpos = [];
  if showtraj1
    startpos = [pos1 + start_factor*sigma_g1*linspace(traj_tuning(1), traj_tuning(2), num_traj)];
  end
  if showtraj2
    startpos = [startpos, pos2 + start_factor*sigma_g2*linspace(traj_tuning(1), traj_tuning(2), num_traj)];
  end
  
  nz = [];
  for k = 1:size(startpos,2)
    x_value = floor(startpos(k));
    if  x_value &gt; 0 &amp;&amp; x_value &lt;= X_max
      nz = [nz, c(x_value, 1)];
    end
  end
  
  hold on
  
  hg = hggroup();
  [~, hg] = contour(c', nz, 'r');  # display numerical simulation's result
  
  set (hg, 'linewidth', 0.1);
  %    contour(t,x,real(c),nz)  # display numerical simulation's result
end


set(gca, 'fontsize', 11);

colorbar (gca, &quot;hide&quot;);
grid('off');
axis ([0, X_max, 0, Y_max], &quot;square&quot;);
hold on
</uiControl>
    <uiControl class="callBackCtrl" Arguments="this" functionName="callBack_mouse_fcn" Name="callBack_mouse" Position="[905 145 52 52]">% This code can define a callback.
% You must associate them to figure or control onload like event window

global param_setup;

puts('clicked: ')

pt = get(this.Image_3, 'currentpoint');
disp(pt(:,1:2))

p = param_setup.materials(:,1:4);

hit = 0;
for m = 1: rows(p)
  poly = [p(m,1) p(m,2); p(m,3) p(m,2); p(m,3) p(m,4); p(m,1) p(m,4)];
  if isPointInPolygon(pt(:,1:2), poly)
    puts('hit: ');
    disp(m);
    hit = m;
  end
end

if hit &gt; 0
  set(this.Slider_DE1d, 'value', hit);
%  callBack_read_materials_fcn([], [], this);
end
</uiControl>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_28" Position="[545 380 14 19]" String="of" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="20" FontWeight="bold" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="center" isAutoSize="false" Name="la_num_of_materials" Position="[575 370 41 38]" String="Label_29" TooltipString="" visible="on"/>
    <uiControl class="buttonCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" icon="mehrstrahl_prameter.png" Name="Button_25" Position="[15 15 667 200]" String="" TooltipString="" visible="on">% This code will be executed when user click the button control.
% As default, all events are deactivated, to activate must set the
% property 'generateCallback' from the properties editor</uiControl>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_46" Position="[15 270 60 19]" String="t out-&gt;in" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_47" Position="[15 295 57 19]" String="t'' in-&gt;in" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_48" Position="[15 320 72 19]" String="t'''' in-&gt;out" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_49" Position="[15 345 80 19]" String="φ_t out-&gt;in" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_50" Position="[15 370 77 19]" String="φ_t'' in-&gt;in" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_51" Position="[15 395 92 19]" String="φ_t'''' in-&gt;out" TooltipString="" visible="on"/>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_t_out_in" Position="[105 270 90 22]" String="Edit_26" TooltipString="transmission factor between 0..1" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

val = str2num(get(Depot_editor.ed_t_out_in, 'string'));
val_limited = max(0, min(1, val));

depot.adv_materials(depot.toi, m) = val_limited;
depot.adv_materials(depot.roi, m) = 1 - val_limited;
set(Depot_editor.ed_t_out_in, 'string', num2str(val_limited));
set(Depot_editor.ed_r_out_in, 'string', num2str(1 - val_limited));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_t_in_in" Position="[105 295 90 22]" String="Edit_27" TooltipString="transmission factor between 0..1" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

val = str2num(get(Depot_editor.ed_t_in_in, 'string'));
val_limited = max(0, min(1, val));

depot.adv_materials(depot.tii, m) = val_limited;
depot.adv_materials(depot.rii, m) = 1 - val_limited;
set(Depot_editor.ed_t_in_in, 'string', num2str(val_limited));
set(Depot_editor.ed_r_in_in, 'string', num2str(1 - val_limited));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_t_in_out" Position="[105 320 90 22]" String="Edit_28" TooltipString="transmission factor between 0..1" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

val = str2num(get(Depot_editor.ed_t_in_out, 'string'));
val_limited = max(0, min(1, val));

depot.adv_materials(depot.tio, m) = val_limited;
depot.adv_materials(depot.rio, m) = 1 - val_limited;
set(Depot_editor.ed_t_in_out, 'string', num2str(val_limited));
set(Depot_editor.ed_r_in_out, 'string', num2str(1 - val_limited));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_phi_t_out_in" Position="[105 345 90 22]" String="Edit_29" TooltipString="phi on transition 0..2*pi" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

depot.adv_materials(depot.phi_toi, m) = str2num(get(Depot_editor.ed_phi_t_out_in, 'string'));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_phi_t_in_in" Position="[105 370 90 22]" String="Edit_30" TooltipString="phi on transition 0..2*pi" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

depot.adv_materials(depot.phi_tii, m) = str2num(get(Depot_editor.ed_phi_t_in_in, 'string'));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_phi_t_in_out" Position="[105 395 90 22]" String="Edit_31" TooltipString="phi on transition 0..2*pi" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

depot.adv_materials(depot.phi_tio, m) = str2num(get(Depot_editor.ed_phi_t_in_out, 'string'));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_52" Position="[220 270 62 19]" String="r out-&gt;in" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_53" Position="[220 295 59 19]" String="r'' in-&gt;in" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="label_34" Position="[220 320 74 19]" String="r'''' in-&gt;out" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_55" Position="[220 345 82 19]" String="φ_r out-&gt;in" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_56" Position="[220 370 79 19]" String="φ_r'' in-&gt;in" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_57" Position="[220 395 94 19]" String="φ_r'''' in-&gt;out" TooltipString="" visible="on"/>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_r_out_in" Position="[315 270 90 22]" String="Edit_32" TooltipString="reflection factor between 0..1" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

val = str2num(get(Depot_editor.ed_r_out_in, 'string'));
val_limited = max(0, min(1, val));

depot.adv_materials(depot.roi, m) = val_limited;
set(Depot_editor.ed_r_out_in, 'string', num2str(val_limited));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_r_in_in" Position="[315 295 90 22]" String="Edit_33" TooltipString="reflection factor between 0..1" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

val = str2num(get(Depot_editor.ed_r_in_in, 'string'));
val_limited = max(0, min(1, val));

depot.adv_materials(depot.rii, m) = val_limited;
set(Depot_editor.ed_r_in_in, 'string', num2str(val_limited));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_r_in_out" Position="[315 320 90 22]" String="Edit_34" TooltipString="reflection factor between 0..1" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

val = str2num(get(Depot_editor.ed_r_in_out, 'string'));
val_limited = max(0, min(1, val));

depot.adv_materials(depot.rio, m) = val_limited;
set(Depot_editor.ed_r_in_out, 'string', num2str(val_limited));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_phi_r_out_in" Position="[315 345 90 22]" String="Edit_35" TooltipString="phi on reflection 0..2*pi" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

depot.adv_materials(depot.phi_roi, m) = str2num(get(Depot_editor.ed_phi_r_out_in, 'string'));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_phi_r_in_in" Position="[315 370 90 22]" String="Edit_36" TooltipString="phi on reflection 0..2*pi" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

depot.adv_materials(depot.phi_rii, m) = str2num(get(Depot_editor.ed_phi_r_in_in, 'string'));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_phi_r_in_out" Position="[315 395 90 22]" String="Edit_37" TooltipString="phi on reflection 0..2*pi" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

depot.adv_materials(depot.phi_rio, m) = str2num(get(Depot_editor.ed_phi_r_in_out, 'string'));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_58" Position="[15 240 100 19]" String="Transmission:" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_59" Position="[220 240 77 19]" String="Reflection:" TooltipString="" visible="on"/>
    <uiControl class="textCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="false" HorizontalAlignment="left" isAutoSize="true" Name="Label_60" Position="[425 240 83 19]" String="Description" TooltipString="" visible="on"/>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_description" Position="[530 240 147 22]" String="Edit_38" TooltipString="" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

mat_names = cellstr(depot.material_names);
mat_names(m, 1) = get(Depot_editor.ed_description, 'string');
depot.material_names =  char(mat_names)

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="editCtrl" BackgroundColor="[1.000 1.000 1.000]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" HorizontalAlignment="left" Name="ed_refr_idx" Position="[215 425 90 22]" String="Edit_39" TooltipString="refraction index between 0..1" visible="on">% This code will be executed when de control lost focus and text has
% been changed or when press the enter key
% As default, all events are deactivated, to activate must set the
% property 'generateCallBack' from the properties editor

%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

val = str2num(get(Depot_editor.ed_refr_idx, 'string'));
val_limited = max(0, min(1, val));

depot.adv_materials(depot.refr_idx, m) = val_limited;
set(Depot_editor.ed_refr_idx, 'string', num2str(val_limited));

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="checkBoxCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" Name="cb_use_refraction" Position="[30 425 177 23]" String="use refraction index" TooltipString="" Value="deselect" visible="on">
%global depot;
global doDebug;

depot = getappdata(gcf(), 'depot');

m = str2num(get(Depot_editor.la_material_number, 'string'));

if m &lt; 1
  return;
end

depot.adv_materials(depot.use_refraction, m) = get(Depot_editor.cb_use_refraction, 'value');

setappdata(gcf(), 'depot', depot);
</uiControl>
    <uiControl class="callBackCtrl" Arguments="Depot_editor" functionName="callBack_fill_in_factors_fcn" Name="callBack_fill_in_factors" Position="[155 215 52 52]">% This code can define a callback.
% You must associate them to figure or control onload like event window

global doDebug;

dbg_disp('entering Slider_DE1d', doDebug);

depot = getappdata(gcf(), 'depot');

m = round(get(Depot_editor.Slider_DE1d, 'Value'));
if (m &gt; 0 &amp;&amp; columns(depot.adv_materials) &gt; 0)
  set(Depot_editor.ed_description, 'string', depot.material_names(m, :));

  set(Depot_editor.ed_t_out_in, 'string', num2str(depot.adv_materials(depot.toi, m)));
  set(Depot_editor.ed_t_in_in, 'string', num2str(depot.adv_materials(depot.tii, m)));
  set(Depot_editor.ed_t_in_out, 'string', num2str(depot.adv_materials(depot.tio, m)));
  set(Depot_editor.ed_phi_t_out_in, 'string', num2str(depot.adv_materials(depot.phi_toi, m)));
  set(Depot_editor.ed_phi_t_in_in, 'string', num2str(depot.adv_materials(depot.phi_tii, m)));
  set(Depot_editor.ed_phi_t_in_out, 'string', num2str(depot.adv_materials(depot.phi_tio, m)));

  set(Depot_editor.ed_r_out_in, 'string', num2str(depot.adv_materials(depot.roi, m)));
  set(Depot_editor.ed_r_in_in, 'string', num2str(depot.adv_materials(depot.rii, m)));
  set(Depot_editor.ed_r_in_out, 'string', num2str(depot.adv_materials(depot.rio, m)));
  set(Depot_editor.ed_phi_r_out_in, 'string', num2str(depot.adv_materials(depot.phi_roi, m)));
  set(Depot_editor.ed_phi_r_in_in, 'string', num2str(depot.adv_materials(depot.phi_rii, m)));
  set(Depot_editor.ed_phi_r_in_out, 'string', num2str(depot.adv_materials(depot.phi_rio, m)));

  set(Depot_editor.ed_refr_idx, 'string', num2str(depot.adv_materials(depot.refr_idx, m)));
  set(Depot_editor.cb_use_refraction, 'value', logical(depot.adv_materials(depot.use_refraction, m)));
end

count = columns(depot.adv_materials);

set(Depot_editor.la_material_number, 'string', num2str(m));
set(Depot_editor.la_num_of_materials, 'string', num2str(count));


%hold off
%axis(Depot_editor.Image_4, [0 1 0 1]);	% restore limits
%grid on
callBack_sim_materials_fcn([], [], Depot_editor);
refresh();
</uiControl>
    <uiControl class="buttonCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" icon="media-playback-start-7.png" Name="b_run_sim_material" Position="[825 400 69 51]" String="" TooltipString="" visible="on">% This code will be executed when user click the button control.
% As default, all events are deactivated, to activate must set the
% property 'generateCallback' from the properties editor

callBack_sim_materials_fcn([], [], Depot_editor);
</uiControl>
    <uiControl class="buttonCtrl" BackgroundColor="[0.941 0.941 0.941]" FontAngle="normal" FontName="Arial" FontSize="10" FontWeight="normal" ForegroundColor="[0.000 0.000 0.000]" GenerateCallBack="true" icon="" Name="b_quit_DE1d" Position="[815 13 90 43]" String="Quit" TooltipString="Do not save and exit" visible="on">% This code can define a callback.
% You must associate them to figure or control onload like event window

% difference to save: here, 'forget' the appdata 'depot'

%set(this.figure, 'visible', 'off');

close(Depot_editor.figure);
</uiControl>
</dialog>
